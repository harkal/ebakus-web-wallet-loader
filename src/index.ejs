<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title><%= htmlWebpackPlugin.options.title %></title>
    <script
      src="https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.0.0-beta.37/dist/web3.min.js"
      integrity="sha256-nWBTbvxhJgjslRyuAKJHK+XcZPlCnmIAAMixz6EefVk="
      crossorigin="anonymous"
    ></script>
    <script
      src="https://s3.amazonaws.com/browser-solc.dappbench.com/browser-solc.min.js"
      type="text/javascript"
    ></script>
    <script>
      // you can listen for `ebakusLoaded` event in order to know when wallet is ready
      window.addEventListener(
        'ebakusLoaded',
        function(e) {
          console.warn('Ebakus Loaded!!!')
        },
        false
      )

      var web3 = new Web3(
        new Web3.providers.WebsocketProvider('wss://nodepow.ebakus.com', {
          headers: {
            origin: 'webwallet',
          },
        })
      )
      // var web3 = new Web3()
      // web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'))

      var abi = JSON.parse(
        '[{"constant":true,"inputs":[],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"toWhom","type":"address"}],"name":"sendWei","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"getWei","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getSendAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":true,"stateMutability":"payable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"}]'
      )

      var faucetContractAddress = '0xd799e3f0f4b3d8429cb3c8c22b7866193ebbe1ca'
      var faucetContract = new web3.eth.Contract(abi, faucetContractAddress)

      function getWei() {
        document.getElementById('status').innerText =
          'getWei transaction sent, waiting for confirmation'

        ebakus
          .getDefaultAddress()
          .then(address =>
            ebakus.sendTransaction({
              to: faucetContractAddress,
              data: faucetContract.methods.getWei().encodeABI(),
            })
          )
          .then(receipt => {
            console.warn('Faucet receipt: ', receipt)
            return ebakus.getBalance()
          })
          .then(balance => {
            console.warn('Balance after getWei', balance)

            document.getElementById('status').innerText =
              'New Balance after getWei is: ' + web3.utils.fromWei(balance)
          })
          .catch(err => {
            console.error(err)
          })
      }

      function deployContract() {
        var contractSolc = document.getElementById('contract').value.trim()

        ebakus.getDefaultAddress().then(address => {
          // find more versions fom here https://s3.amazonaws.com/browser-solc.dappbench.com/index.html
          BrowserSolc.loadVersion(
            'soljson-v0.4.18+commit.9cf6e910.js',
            function(compiler) {
              var output = compiler.compile(contractSolc, 1)
              for (var contractName in output.contracts) {
                document.getElementById('status').innerText =
                  'deploying contract ' + contractName

                var contractBytecode =
                  '0x' + output.contracts[contractName].bytecode
                var contractAbi = JSON.parse(
                  output.contracts[contractName].interface
                )

                var contract = new web3.eth.Contract(contractAbi)
                var deployableCode = contract.deploy({
                  data: contractBytecode,
                })

                ebakus
                  .sendTransaction({
                    from: address,
                    gas: 210000,
                    data: deployableCode.encodeABI(),
                  })
                  .then(receipt => {
                    console.warn('deployContract receipt: ', receipt)
                    document.getElementById('status').innerText =
                      'deployContract (' + contractName + ') done!'
                  })
                  .catch(err => {
                    console.error(err)
                  })
              }
            }
          )
        })
      }

      function sendTransaction() {
        ebakus
          .getDefaultAddress()
          .then(address => {
            var toAddress = document.getElementById('address').value
            var amount = document.getElementById('amount').value
            console.log('toAddress: ', toAddress)
            console.log('amount: ', amount)

            document.getElementById('status').innerText =
              'Transaction to address "' +
              toAddress +
              '" sent, waiting for confirmation'

            return ebakus.sendTransaction({
              from: address,
              to: toAddress,
              value: web3.utils.toWei(amount),
            })
          })
          .then(receipt => {
            console.warn('receipt: ', receipt)
            return ebakus.getBalance()
          })
          .then(balance => {
            console.warn('balance', balance)

            document.getElementById('status').innerText =
              'New Balance after sendTransaction is: ' +
              web3.utils.fromWei(balance)
          })
          .catch(err => {
            console.error(err)
          })
      }
    </script>
  </head>

  <body>
    <h1><%= htmlWebpackPlugin.options.title %> Demo</h1>

    <p>Status: <span id="status"></span></p>

    <hr />

    <h2>1. Get some Ebakus to your account</h2>
    <button onClick="getWei()">Get Wei</button>

    <h2>2. Deploy a contract</h2>

    <textarea id="contract" placeholder="Your contract code" rows="4" cols="50">
pragma solidity ^0.4.18;

contract Echo {
    bytes32 public message;

    function sendMessage(bytes32 _message) public {
        message = _message;
    }

    function getMessage() view public returns (bytes32) {
        return message;
    }
}</textarea
    >

    <button onClick="deployContract()">Deploy Contract</button>

    <h2>3. Send some Ebakus</h2>
    <div class="wrapper">
      <label for="address"> To (Address) </label>
      <input
        type="text"
        id="address"
        name="address"
        placeholder="i.e. 0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98"
      />

      <label for="amount"> Amount </label>
      <input
        type="number"
        id="amount"
        name="amount"
        step="any"
        placeholder="0.0"
      />

      <button onClick="sendTransaction()">Send transaction</button>
    </div>
  </body>
</html>
